generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MERCHANT
  CUSTOMER
}

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  last_login  DateTime? @db.Timestamptz(6)
  is_active   Boolean   @default(true)
  is_verified Boolean   @default(false)
  email       String    @unique @db.VarChar
  password    String    @db.VarChar
  name        String    @db.VarChar
  full_name   String?   @db.VarChar
  role        Role      @default(CUSTOMER)
  comments    Comment[]
  stores      Store[]   // One user can have many stores
  images      Image[]   // Images uploaded by the user

  @@map("users")
}

model Store {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name        String    @db.VarChar
  address     String    @db.VarChar
  latitude    Float
  longitude   Float
  description String?
  userId      Int       @map("user_id") // 店主ID
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  products    Product[]

  @@map("stores")
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  name        String   @db.VarChar
  price       Float
  description String?
  storeId     Int      @map("store_id")
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  imageId     Int      @map("image_id")
  image       Image    @relation(fields: [imageId], references: [id])

  @@map("products")
}

model Image {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  url         String    @db.VarChar
  isPublic    Boolean   @default(false) @map("is_public")
  userId      Int       @map("user_id") // 上傳者ID
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    Product[] // 使用這張圖片的產品

  @@map("images")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  content   String
  rating    Int      @db.SmallInt
  userId    Int      @map("user_id")
  storeId   Int      @map("store_id")
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Banner {
	id        Int      @id @default(autoincrement())
	createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
	updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
	imageUrl  String   @map("image_url") @db.VarChar
	link      String   @db.VarChar
	title     String?  @db.VarChar
	isActive  Boolean  @default(true) @map("is_active")
	order     Int      @default(0)

	@@map("banners")
}

model Faq {
	id        Int      @id @default(autoincrement())
	createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
	updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
	question  String   @db.VarChar
	answer    String   @db.Text
	category  String   @db.VarChar
	order     Int      @default(0)
	isActive  Boolean  @default(true) @map("is_active")

	@@map("faqs")
}


