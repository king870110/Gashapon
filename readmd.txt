扭蛋地圖技術文檔
1. 項目概述
扭蛋地圖是一個用於查找台灣地區扭蛋店的應用，並提供扭蛋項目的搜尋功能。使用者可以在地圖上查看扭蛋店的位置，並針對每個扭蛋店進行評論。每個店鋪可自行管理其販售的扭蛋商品，提供給使用者最新的商品資訊和評價。

2. 技術架構
本項目基於以下技術栈開發：

2.1 後端框架
Node.js：基於 Node.js 開發，適合處理高效能、非同步的請求處理，確保應用能在高負載下運行流暢。
NestJS：作為 Node.js 的一個進階框架，NestJS 提供了強大的模組化設計、依賴注入以及自動化測試功能，並以 TypeScript 編寫，提高代碼可維護性和可擴展性。
2.2 前端框架
ReactJS
CSS：採用Bootstrap
2.3 資料庫
PostgreSQL：作為關聯型資料庫，PostgreSQL 提供強大的查詢和資料管理能力，適合處理扭蛋店、商品及用戶評論等結構化資料。
Prisma：作為 ORM，Prisma 用來簡化資料庫的操作，提供更高效、易於管理的資料訪問層。
2.4 插件
Morgan：用於 HTTP 請求日誌紀錄，能夠幫助開發者追蹤 API 請求和性能。
Redis：用作快取系統，提升應用的資料存取速度，減少資料庫的負擔，尤其在高頻查詢的情況下有效。
Swagger：用於 API 文檔自動化生成，提供直觀的 RESTful API 使用說明，方便開發者及使用者進行接口測試和文檔查看。
2.5 其他功能與技術
JWT：用於用戶認證和授權。每個使用者進行操作時，需要附帶有效的 JWT Token，確保其權限。
Socket.IO：實現即時通訊功能，當店鋪更新商品或有新評論時，能即時通知所有用戶。
Winston：提供統一的日誌管理，能夠記錄應用的運行狀況，幫助開發者進行錯誤排查和性能分析。
New Relic：作為應用性能監控工具，New Relic 會監控系統的效能，提供詳細的性能指標，幫助開發者識別潛在的性能瓶頸。
3. 系統設計
3.1 主要功能
扭蛋店展示：使用者可以查看台灣地區的扭蛋店位置，並且能夠根據扭蛋商品類別或位置進行篩選。
商品管理：每個扭蛋店可以管理其販售的扭蛋商品，並提供商品的詳細資訊，例如價格、商品圖片等。
用戶評論：使用者可以針對已經訪問過的扭蛋店進行評論，其他使用者可以查看評論內容以了解其他人的購物體驗。
即時通知：通過 Socket.IO，當有新的商品上架或評論發佈時，所有已連接的用戶會收到即時通知。
3.2 資料流與交互
用戶端：
使用者通過前端界面與應用進行交互，查詢扭蛋店位置、商品資訊、評論等。
前端應用透過 API 向後端發送請求，獲取資料或提交用戶評論等操作。
後端：
接收前端的請求，處理商店和商品的查詢、評論的增刪改查等功能。
後端與資料庫進行交互，存取商店資料、商品資料、用戶評論等，並將處理結果返回前端。
使用 JWT 認證來保護需要身份驗證的 API，使用 Socket.IO 推送即時訊息。
透過 Redis 快取常見查詢，提升查詢速度。
使用 Winston 記錄所有請求的日誌，以便排查錯誤。
使用 New Relic 監控應用的效能，確保服務穩定。
3.3 API 設計
所有 API 都遵循 RESTful 標準，並且提供清晰的 Swagger 文檔來描述 API 規格。
3.4 安全性與認證
使用 JWT 來進行用戶認證與授權，確保每個操作都是經過授權的。
所有涉及到用戶數據的操作（如評論提交、商品管理等）都需要有效的 JWT Token。
3.5 性能優化
使用 Redis 來做快取處理，減少對資料庫的高頻請求，提升應用性能。
使用 Socket.IO 提供即時消息推送，降低前端的輪詢開銷。
透過 Winston 和 New Relic 進行應用性能的實時監控，及時發現並解決性能瓶頸。
4. 測試與部署
4.1 測試
Cypress 用於前端端到端測試，保證應用的穩定性和可靠性。
單元測試和集成測試使用 NestJS 提供的測試框架進行，確保後端邏輯的正確性。
4.2 部署
使用 Docker 來打包應用，簡化部署流程，並支持多環境運行。
部署在雲端平台（如 AWS、Azure 或 GCP），並利用負載均衡器來保證高可用性。